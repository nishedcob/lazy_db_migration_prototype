# Generated by Django 2.2.7 on 2020-10-21 04:49

import random
import datetime
import string
from functools import reduce
from django.db import migrations

from data.models import Thing, UnrelatedThing, SubThing

NUMBER_OF_THINGS = 1000000
NUMBER_OF_UNRELATEDTHINGS = 500000
MAX_SUBTHINGS_PER_THING = 2
MIN_SUBTHINGS_PER_THING = 0
START_DATE = datetime.datetime.fromisoformat('2010-01-01T00:00:00+00:00') # choosen at random to give us 10+ years of "historical" data
END_DATE = datetime.datetime.fromisoformat('2020-10-21T00:00:00+00:00') # choosen based on the time of writing minus the maximum timedelta (to avoid dates in the future)
MAX_TIMEDELTA = datetime.timedelta(days=1) # this should give us *Things that were never "edited" beyond their first 24 hours of existence, not exactly ideal, but a good enough approximation for now
DATE_DELTA = END_DATE - START_DATE

# we want the exact same dataset every time, so we set a seed:
random.seed('test')

def build_a_date():
    current_date_delta = datetime.timedelta(milliseconds=random.randint(0, DATE_DELTA.total_seconds() * 1000))
    print('d: {}'.format(START_DATE + current_date_delta))
    return START_DATE + current_date_delta

def build_a_positive_timedelta():
    timedelta = datetime.timedelta(milliseconds=random.randint(0, MAX_TIMEDELTA.total_seconds() * 1000))
    print('t: {}'.format(timedelta))
    return timedelta

def build_a_name():
    name = reduce(
        lambda a, b: a + b,
        [
            random.choice(
                string.ascii_letters + string.digits
            )
            for _ in range(random.randint(5, 10))
        ]
    )
    print('n: {}'.format(name))
    return name

def build_a_thing():
    date = build_a_date()
    thing = Thing(
        name=build_a_name(),
        date_created=date,
        date_modified=date + build_a_positive_timedelta()
    )
    thing.save()
    print('T: {}'.format(thing))
    for _ in range(random.randint(MIN_SUBTHINGS_PER_THING, MAX_SUBTHINGS_PER_THING)):
        build_a_subthing(thing)

def build_a_subthing(thing):
    date = thing.date_created + build_a_positive_timedelta()
    subthing = SubThing(
        name=build_a_name(),
        date_created=date,
        date_modified=date + build_a_positive_timedelta(),
        thing=thing
    )
    subthing.save()
    print('S: {}'.format(subthing))

def build_an_unrelated_thing():
    date = build_a_date()
    unrelatedthing = UnrelatedThing(
        name=build_a_name(),
        date_created=date,
        date_modified=date + build_a_positive_timedelta()
    )
    unrelatedthing.save()
    print('U: {}'.format(unrelatedthing))

def populate_db(apps, schema_editor):
    for t in range(NUMBER_OF_THINGS):
        print(f"THING {t+1}/{NUMBER_OF_THINGS}")
        build_a_thing()
    for ut in range(NUMBER_OF_UNRELATEDTHINGS):
        print(f"UNRELATEDTHING {ut+1}/{NUMBER_OF_UNRELATEDTHINGS}")
        build_an_unrelated_thing()

class Migration(migrations.Migration):

    dependencies = [
        ('data', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_db),
    ]
